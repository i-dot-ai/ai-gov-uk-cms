<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="noindex" />
    <title>Content Manager</title>
  </head>
  <body>
    <script src="https://unpkg.com/decap-cms@3.7.2/dist/decap-cms.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js"
      integrity="sha512-LhccdVNGe2QMEfI3x4DVV3ckMRe36TfydKss6mJpdHjNFiV07dFpS2xzeZedptKZrwxfICJpez09iNioiSZ3hA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>

      const convertDate = (dateStr) => {
          const months = [
              "January", "February", "March", "April", "May", "June",
              "July", "August", "September", "October", "November", "December"
          ];
          const suffixes = ["th", "st", "nd", "rd"];
          function getDaySuffix(day) {
              if (day > 3 && day < 21) return "th"; // Covers 11th, 12th, 13th
              switch (day % 10) {
                  case 1: return suffixes[1];
                  case 2: return suffixes[2];
                  case 3: return suffixes[3];
                  default: return suffixes[0];
              }
          }
          const [year, month, day] = dateStr.split('-');
          if (!year || !month || !day) {
              return "";
          }
          const dayNumber = parseInt(day, 10);
          const monthName = months[parseInt(month, 10) - 1];
          const daySuffix = getDaySuffix(dayNumber);
          return `${dayNumber}${daySuffix} ${monthName} ${year}`;
      };


      const getImage = async (imageIndex) => {

        const convertBlobToBase64 = (blob) => {
          return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsDataURL(blob);
          });
        };

        const allImages = document.querySelectorAll('img[role="presentation"]');
        if (allImages.length < imageIndex + 1) {
          return "";
        }
        const img = allImages[imageIndex];
        const response = await fetch(img.src);
        const blob = await response.blob();
        const base64 = await convertBlobToBase64(blob);
        return base64;
      };


      let converter = new showdown.Converter({
        sanitize: false
      });


      const Preview = createClass({
        componentDidUpdate: async function() {
          const entry = this.props.entry;
          const data = entry.getIn(['data']).toJS();
          let imageCount = 0;
          if (data.date) {
            data.date = convertDate(data.date);
          }
          if (data.leadImage) {
            data.leadImage = await getImage(imageCount);
            if (data.leadImage) {
              imageCount++;
            }
          }
          for (let component of data.components || []) {
            if (component.type === "bodyText" || component.type === "doubleColumn") {
              component.content = converter.makeHtml( component.content?.replace(/<!--[\s\S]*?-->/g, '') );

              // convert any inline images
              const matches = component.content.match(/<img src="[^"]*"/g);
              if (matches) {
                for (const match of matches) {
                  const oldUrl = match
                    .replace('<img src="', "")
                    .replace('"', "");
                  const newUrl = await getImage(imageCount);
                  imageCount ++;
                  component.content = component.content.replace(oldUrl, newUrl);
                }
              }

            }
            if (component.type === "doubleColumn") {
              component.content = converter.makeHtml( component.content?.replace(/<!--[\s\S]*?-->/g, '') );
              component.content = component.content.replace(/"/g, "&quot;");
              component.image = await getImage(imageCount);
              if (component.image) {
                imageCount++;
              }
            }
            if (component.type === "carousel") {
              const items = component.carouselItems?.length ? component.carouselItems.map((item) => item.carouselContent) : [];
              component.carouselItems = JSON.stringify(items).replace(/"/g, '&quot;');
            }
          }

          if (data.content) {
            data.content = converter.makeHtml(data.content);
            data.content = data.content
              .replaceAll('<h2', '<h2 class="govuk-heading-m"')
              .replaceAll('<h3', '<h3 class="govuk-heading-s"')
              .replaceAll('<ul>', '<ul class="govuk-list govuk-list--bullet govuk-list--spaced">');


            if (!data.components) {
              // convert any inline images
              const matches = data.content.match(/<img src="[^"]*"/g);
              if (matches) {
                for (const match of matches) {
                  const oldUrl = match
                    .replace('<img src="', "")
                    .replace('"', "");
                  const newUrl = await getImage(imageCount);
                  imageCount ++;
                  data.content = data.content.replace(oldUrl, newUrl);
                }
              }
            }

            if (window.location.hash.includes('collections/Pages/entries/knowledge_hub_playbook')) {
              data.title = 'Playbook';
            } else if (window.location.hash.includes('collections/Pages/entries/knowledge_hub_guidance_dev_v')) {
              data.title = 'Using AI Assistants';
            }
          }

          this.iframe.contentWindow.postMessage(data, "*");
          // in case this is sent before the the preview has loaded
          this.iframe.addEventListener("load", () => {
            this.iframe.contentWindow.postMessage(data, "*")
          });

        },
        render: function() {
          let previewUrl = "";
          if (window.location.hash.includes("collections/blogs")) {
            previewUrl = "https://ai.gov.uk/blogs/preview";
          } else if (window.location.hash.includes("collections/projects")) {
            previewUrl = "https://ai.gov.uk/projects/preview";
          } else if (
            window.location.hash.includes("collections/Pages/entries/knowledge_hub_guidance") || 
            window.location.hash.includes("collections/Pages/entries/knowledge_hub_playbook")) {
            previewUrl = "https://ai.gov.uk/knowledge-hub/guidance/";
          } else if (window.location.hash.includes("collections/evals")) {
            previewUrl = "https://ai.gov.uk/evaluations/cms-preview";
          }
          return h('div', {},
            h('iframe', {
              src: previewUrl,
              ref: (iframe) => { this.iframe = iframe; }
            })
          );
        }
      });

      CMS.registerPreviewTemplate("blogs", Preview);
      CMS.registerPreviewTemplate("projects", Preview);
      CMS.registerPreviewTemplate("knowledge_hub_guidance", Preview);
      CMS.registerPreviewTemplate("knowledge_hub_guidance_dev_v_a", Preview);
      CMS.registerPreviewTemplate("knowledge_hub_guidance_dev_v_b", Preview);
      CMS.registerPreviewTemplate("knowledge_hub_playbook", Preview);
      CMS.registerPreviewTemplate("evals", Preview);
      CMS.registerPreviewStyle(`
        iframe {
          width: 100%;
          height: calc(100vh - 1rem);
        }
      `, { raw: true });

      {% if envs.buildHook %}
        CMS.registerEventListener({
          name: "prePublish",
          handler: () => {
            // Trigger Netlify build hook
            fetch("{{ envs.buildHook }}", {
              method: "POST"
            });
          }
        });
      {% endif %}

      // Set timestamps
      CMS.registerEventListener({
        name: "preSave",
        handler: ({ entry }) => {
          if( !entry.get("data").get("created") ) {
            return entry.get("data").set("created", Date.now().toString())
          }
        }
      });
      CMS.registerEventListener({
        name: "preSave",
        handler: ({ entry }) => {
          return entry.get("data").set("updated", Date.now().toString())
        }
      });
      // Handle JSON import processing
      CMS.registerEventListener({
        name: "preSave",
        handler: ({ entry }) => {
          
          const data = entry.get("data");
          const jsonImportData = data.get("jsonImportData");
          const collection = entry.get("collection");
          
          if (collection === "knowledge_hub_use_cases" || collection === "knowledge_hub_private_use_cases" && jsonImportData) {
            console.log("Processing JSON import for usecase");
            
            try {
              const jsonData = JSON.parse(jsonImportData);
              
              // make a copy of data to update so if something fails we can return original
              let updatedData = data;

              const fields = [
                "title", "synopsis", "organisation", "draft", "governmentBody", "userGroup",
                "useCaseType", "typeOfTechnology", "phase", "impact", "challenge", "solution",
                "results", "learnings", "links"
              ];

              fields.forEach(field => {
                if (jsonData[field] !== undefined) {
                  updatedData = updatedData.set(field, jsonData[field]);
                }
              });

              updateData = updatedData.delete("jsonImportData");

              return updatedData;
            } catch (error) {
              console.error("Error processing JSON import:", error);
              // Don't prevent saving, just log the error
              return data;
            }
          }
          
          return data;
        }
      });

    </script>

    {# Old comments
    <script src="/components/comments.js"></script>
    <script src="/components/video.js"></script>
    #}

    {# New comments
    {% include "./components/comments.njk" %}
    #}

    <script src="/components/file-upload-widget.js"></script>
  </body>
</html>
